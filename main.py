import asyncio
import io
import logging

import aiofiles
import pytesseract
import os
import PyPDF2
import aiosqlite
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from pdf2image import convert_from_path
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
import hashlib

from database import init_db
from keyboards import purchase_keyboard, purchase_inline_keyboard, support_builder_keyboard

TOKEN = os.getenv("TOKEN")

HEROKU_APP_NAME = os.getenv('telepay-production-app')

# webhook settings
WEBHOOK_HOST = f'https://{HEROKU_APP_NAME}.herokuapp.com'
WEBHOOK_PATH = f'/webhook/{TOKEN}'
WEBHOOK_URL = f'{WEBHOOK_HOST}{WEBHOOK_PATH}'

# webserver settings
WEBAPP_HOST = '0.0.0.0'
WEBAPP_PORT = int(os.getenv('PORT', default=8000))

PAYMENT_AMOUNT = os.getenv("PAYMENT_AMOUNT") # –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
STORE_NAME = os.getenv("STORE_NAME") # –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
SELLER_BIN = os.getenv("SELLER_BIN") # –ë–ò–ù/–ò–ò–ù –ü—Ä–æ–¥–∞–≤—Ü–∞
ADMIN_ID = os.getenv("ADMIN_ID") # USER_ID –ê–¥–º–∏–Ω–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º (–±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)
KASPI_QR = os.getenv("KASPI_QR") # —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
os.environ["TESSDATA_PREFIX"] = os.getenv("TESSDATA_PREFIX", "/app/.apt/usr/share/tesseract-ocr/4.00/tessdata")
os.makedirs("downloads", exist_ok=True)
bot = Bot(token=TOKEN)
dp = Dispatcher()

class SupportStates(StatesGroup):
    support_message = State()

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

@dp.message(Command("start"))
async def send_welcome(message: Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ!", reply_markup=purchase_keyboard)

@dp.message(lambda message: message.text == "üõí –ö—É–ø–∏—Ç—å")
async def start_purchase(message: Message):
    await message.answer(
        f"üîπ –û–ø–ª–∞—Ç–∏—Ç–µ *{PAYMENT_AMOUNT} KZT* —á–µ—Ä–µ–∑ Kaspi QR\n\n"
        f"üìé {KASPI_QR}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã PDF-—Ñ–∞–π–ª —á–µ–∫–∞ üìé",
        reply_markup=purchase_inline_keyboard,
        parse_mode="Markdown"
    )

@dp.message(lambda message: message.document and message.document.mime_type == "application/pdf")
async def check_receipt(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ PDF-—á–µ–∫–∞"""
    user_id = message.from_user.id
    username = message.from_user.username

    # --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF-—Ñ–∞–π–ª–∞ ---
    file_id = message.document.file_id
    file = await bot.get_file(file_id)

    pdf_path = f"downloads/receipt_{user_id}.pdf"

    try:
        # --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF-—Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç—å ---
        file_bytes = io.BytesIO()
        await bot.download_file(file.file_path, file_bytes)
        file_bytes.seek(0)  # –í–µ—Ä–Ω—É—Ç—å –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞

        # --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª ---
        async with aiofiles.open(pdf_path, "wb") as f:
            await f.write(file_bytes.read())
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å PDF-—Ñ–∞–π–ª.", reply_markup=purchase_keyboard)
        return

    # --- –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ---
    try:
        images = convert_from_path(pdf_path)
        if not images:
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å PDF-—Ñ–∞–π–ª.", reply_markup=purchase_keyboard)
            return

        img_path = f"downloads/receipt_{user_id}.png"
        images[0].save(img_path, "PNG")

        # --- –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
        text = pytesseract.image_to_string(img_path, lang="rus+eng").lower()
        logging.info(f"üìú –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {text}")

        # --- –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ---
        text_hash = hashlib.sha256(text.encode()).hexdigest()

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç ---
        async with aiosqlite.connect('receipts.db') as db:
            async with db.execute('SELECT 1 FROM receipts WHERE text_hash = ?', (text_hash,)) as cursor:
                if await cursor.fetchone():
                    await message.answer("‚ùå –û—à–∏–±–∫–∞! –î—É–±–ª–∏–∫–∞—Ç —á–µ–∫–∞.", reply_markup=purchase_keyboard)
                    return

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —á–µ–∫–µ ---
        if (
                STORE_NAME.lower() in text and
                SELLER_BIN in text and
                str(PAYMENT_AMOUNT) in text and
                await check_pdf_metadata(pdf_path)
        ):
            await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
            await message.answer("üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!")
            await message.answer("LINK")
            # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ---
            async with aiosqlite.connect('receipts.db') as db:
                await db.execute('''
                    INSERT INTO receipts (user_id, username, text_hash)
                    VALUES (?, ?, ?)
                ''', (user_id, username, text_hash))
                await db.commit()
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞! –ß–µ–∫ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            await bot.send_document(
                ADMIN_ID,
                document=message.document.file_id,
                caption=f"‚ö† –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —á–µ–∫ –æ—Ç @{username}!"
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {e}")
        await message.answer("üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–µ–∫–∞.", reply_markup=purchase_keyboard)

    finally:
        # –ß–∏—Å—Ç–∏–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        os.remove(pdf_path)
        if os.path.exists(img_path):
            os.remove(img_path)

async def check_pdf_metadata(pdf_path: str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ PDF-—Ñ–∞–π–ª–∞"""
    try:
        async with aiofiles.open(pdf_path, "rb") as f:
            content = await f.read()

        reader = PyPDF2.PdfReader(pdf_path)
        metadata = reader.metadata

        # –üÔøΩÔøΩ–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ Producer (Kaspi –∏–ª–∏ WeasyPrint)
        if metadata and metadata.get('/Producer', '') == "WeasyPrint 62.3" and metadata.get('/Title', '') == "–ß–µ–∫":
            logging.info("‚úÖ Producer check passed.")
            return True
        else:
            logging.warning(f"‚ö† Producer check failed: {metadata}")
            return False

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ PDF-–º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

@dp.message(F.text == "üÜò –ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
async def handle_support_callback(message: Message):
    await message.answer("üÜò –ö–∞–∫ –º—ã –º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å?", reply_markup=support_builder_keyboard)

@dp.message(F.text.in_({"‚ùì –ß–µ–∫ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç—Å—è", "‚ùì –Ø –Ω–µ –ø–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫–∏", "‚ùì –î—Ä—É–≥–æ–µ"}))
async def handle_support_builder_callback(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ"""
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=purchase_keyboard)
        return
    button_text = message.text
    await state.update_data(support_title=button_text)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–ΩÔøΩÔøΩ—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    await state.set_state(SupportStates.support_message)

@dp.message(SupportStates.support_message)
async def handle_additional_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""
    if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=purchase_keyboard)
        return
    user_data = await state.get_data()
    support_title = user_data.get('support_title')
    additional_text = message.text

    support_message = f"üì¢ –ó–∞–ø—Ä–æ—Å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n" \
                      f"üîπ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {support_title}\n" \
                      f"üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username}\n" \
                      f"üîπ –°–æ–æ–±—â–µ–Ω–∏–µ: {additional_text}"

    await bot.send_message(ADMIN_ID, support_message)
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=purchase_keyboard)
    await state.clear()

async def on_startup(dispatcher):
    await bot.set_webhook(WEBHOOK_URL, drop_pending_updates=True)
    await init_db()

async def on_shutdown(dispatcher):
    await bot.delete_webhook()

async def main():
    app = web.Application()
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    return app

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    web.run_app(main(), host=WEBAPP_HOST, port=WEBAPP_PORT)